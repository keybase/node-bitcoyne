// Generated by IcedCoffeeScript 108.0.11
(function() {
  var SHA256, base58, bufeq_secure, check, check_hash, check_with_prefixes, decode, kbpgp, match_prefix,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  kbpgp = require('kbpgp');

  SHA256 = kbpgp.hash.SHA256;

  base58 = kbpgp.base58;

  bufeq_secure = require('pgp-utils').util.bufeq_secure;

  decode = function(s) {
    var buf, err;
    try {
      buf = base58.decode(s);
      return [null, buf];
    } catch (_error) {
      err = _error;
      return [err, null];
    }
  };

  check_hash = function(buf) {
    var checksum1, checksum2, pkhash;
    if (buf.length < 8) {
      return new Error("address too short");
    } else {
      pkhash = buf.slice(0, -4);
      checksum1 = buf.slice(-4);
      checksum2 = (SHA256(SHA256(pkhash))).slice(0, 4);
      if (!bufeq_secure(checksum1, checksum2)) {
        return new Error("Checksum mismatch");
      } else {
        return null;
      }
    }
  };

  match_prefix = function(buf, prefixes) {
    var prefix, _i, _len;
    for (_i = 0, _len = prefixes.length; _i < _len; _i++) {
      prefix = prefixes[_i];
      if (bufeq_secure(prefix, buf.slice(0, prefix.length))) {
        return prefix;
      }
    }
    return null;
  };

  exports.check = check = function(s, opts) {
    var buf, err, ret, v, versions, _ref;
    if (opts == null) {
      opts = {};
    }
    versions = opts.versions || [0, 5];
    _ref = decode(s), err = _ref[0], buf = _ref[1];
    if (err != null) {
      return [err, null];
    }
    v = buf.readUInt8(0);
    err = !(__indexOf.call(versions, v) >= 0) ? new Error("Bad version found: " + v) : check_hash(buf);
    ret = err != null ? null : {
      version: v,
      pkhash: buf.slice(1, -4)
    };
    return [err, ret];
  };

  exports.check_with_prefixes = check_with_prefixes = function(s, prefixes) {
    var buf, err, ret, _ref;
    ret = null;
    _ref = decode(s), err = _ref[0], buf = _ref[1];
    if (err == null) {
      err = check_hash(buf);
    }
    if (err == null) {
      ret = match_prefix(buf, prefixes);
      err = ret != null ? null : new Error("Bad address, doesn't match known prefixes");
    }
    return [err, ret];
  };

  exports.check_btc_or_zcash = function(s) {
    var err, k, prefix, prefixes, ret, types, _ref;
    types = {
      "00": {
        family: "bitcoin",
        type: "bitcoin"
      },
      "05": {
        family: "bitcoin",
        type: "bitcoin"
      },
      "169a": {
        family: "zcash",
        type: "zcash.z"
      },
      "1cb8": {
        family: "zcash",
        type: "zcash.t"
      },
      "1cbd": {
        family: "zcash",
        type: "zcash.t"
      }
    };
    prefixes = (function() {
      var _results;
      _results = [];
      for (k in types) {
        _results.push(new Buffer(k, 'hex'));
      }
      return _results;
    })();
    _ref = check_with_prefixes(s, prefixes), err = _ref[0], prefix = _ref[1];
    if (err != null) {
      return [err];
    }
    ret = types[prefix.toString('hex')];
    ret.prefix = prefix;
    return [err, ret];
  };

}).call(this);
